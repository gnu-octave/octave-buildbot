# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *
from buildbot.process.properties import Property

# This is a sample buildmaster config file.  It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to.  We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}


####### WORKERS

# The 'workers' list defines the set of recognized workers.  Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [
  worker.Worker(
    "worker01", "secret_password", max_builds = 1
  )
]
my_workers = []
for w in c['workers']:
  my_workers.append(w.workername)

# 'protocols' contains information about protocols which master will use for
# communicating with workers.  You must define at least 'port' option that
# workers could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {
  'pb': {'port': 9989}
}

####### CHANGESOURCES

# The 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

c['change_source'] = []

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

c['schedulers'] = [
  schedulers.ForceScheduler(
    name = "force",
    builderNames = [
      "octave-stable",
      "octave-mxe-stable-w32",
      "octave-mxe-stable-w64",
      "octave-mxe-stable-w64-64",
      "octave-stable-doxygen"
    ]
  ),
  schedulers.Triggerable(
    name = "trigger",
    builderNames = [
      "octave-mxe-stable-w32",
      "octave-mxe-stable-w64",
      "octave-mxe-stable-w64-64",
      "octave-stable-doxygen"
    ]
  )
]

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform
# a build: what steps, and which workers can execute them.  Note that any
# particular build will only take place on one worker.

OctaveStable = util.BuildFactory()
OctaveStable.addSteps([
  steps.ShellCommand(
    name = "Cleanup build directory",
    command = ["rm", "-Rf", "build"],
    haltOnFailure = True,
    workdir = "."
  ),
  steps.Git(
    name = "gnulib repository",
    repourl = "git://git.savannah.gnu.org/gnulib.git",
    mode = "full",
    method = "fresh",
    haltOnFailure = True,
    workdir = "gnulib"
  ),
  steps.Mercurial(
    name = "Octave repository",
    repourl = "https://www.octave.org/hg/octave",
    mode = "full",
    method = "fresh",
    branchType = "inrepo",
    defaultBranch = "stable",
    haltOnFailure = True,
    workdir = "src"
  ),
  steps.SetPropertyFromCommand(
    name = "Octave repository HG_ID",
    command = "hg identify --id",
    property = "OCTAVE_HG_ID",
    haltOnFailure = True,
    workdir = "src"
  ),
  steps.SetPropertyFromCommand(
    name = "Octave repository VERSION",
    command = 'grep -e "^AC_INIT" configure.ac | grep -Po "(\d+\.)+\d+"',
    property = "OCTAVE_VERSION",
    haltOnFailure = True,
    workdir = "src"
  ),
  steps.ShellCommand(
    name = "bootstrap",
    command = ["./bootstrap", "--gnulib-srcdir=../gnulib"],
    haltOnFailure = True,
    workdir = "src"
  ),
  steps.ShellCommand(
    name = "configure",
    command = ["../src/configure"],
    haltOnFailure = True,
    workdir = "build"
  ),
  steps.ShellCommand(
    name = "make",
    command = ["xvfb-run", "make", "-j4"],
    haltOnFailure = True,
    workdir = "build"
  ),
  steps.ShellCommand(
    name = "make check",
    command = ["make", "check"],
    haltOnFailure = True,
    workdir = "build"
  ),
  steps.ShellCommand(
    name = "make dist",
    command = ["make", "dist"],
    haltOnFailure = True,
    workdir = "build"
  ),
  steps.ShellCommand(
    name = "compress documentation",
    command = ["zip", "-r", "interpreter.zip", "octave.html", "octave.pdf"],
    haltOnFailure = True,
    workdir = "build/doc/interpreter"
  ),
  steps.MultipleFileUpload(
    name = "publish build",
    workersrcs = [
      util.Interpolate("octave-%(prop:OCTAVE_VERSION)s.tar.gz"),
      util.Interpolate("octave-%(prop:OCTAVE_VERSION)s.tar.lz"),
      util.Interpolate("octave-%(prop:OCTAVE_VERSION)s.tar.xz"),
      "doc/interpreter/interpreter.zip"
    ],
    masterdest = util.Interpolate("/buildbot/data/stable/%(prop:OCTAVE_HG_ID)s/"),
    url = util.Interpolate("https://www.octave.space/data/stable/%(prop:OCTAVE_HG_ID)s/"),
    haltOnFailure = True,
    workdir = "build"
  ),
  steps.MasterShellCommand(
    name = "set file permission on master",
    command = "chmod -R +r .",
    haltOnFailure = True,
    workdir = "/buildbot/data"
  ),
  steps.Trigger(
    schedulerNames = ["trigger"],
    set_properties = {
      "OCTAVE_HG_ID"   : Property("OCTAVE_HG_ID"),
      "OCTAVE_VERSION" : Property("OCTAVE_VERSION")
    }
  )
])

OctaveStableDoxygen = util.BuildFactory()
OctaveStableDoxygen.addSteps([
  steps.ShellCommand(
    name = "Cleanup build directory",
    command = ["rm", "-Rf", "build"],
    haltOnFailure = True,
    workdir = "."
  ),
  steps.ShellCommand(
    name = "Download Octave release tarball",
    command = ["wget", util.Interpolate(
      "https://www.octave.space/data/stable/%(prop:OCTAVE_HG_ID)s/octave-%(prop:OCTAVE_VERSION)s.tar.lz")],
    haltOnFailure = True,
    workdir = "build"
  ),
  steps.ShellCommand(
    name = "configure",
    command = ["./configure"],
    haltOnFailure = True,
    workdir = "build"
  ),
  steps.ShellCommand(
    name = "make doxyhtml",
    command = ["make", "doxyhtml"],
    haltOnFailure = True,
    workdir = "build"
  ),
  steps.ShellCommand(
    name = "compress doxyhtml",
    command = ["zip", "-r", "doxyhtml.zip", "doxyhtml",
                      "-x", "octave-cpp-api.qch"],
    haltOnFailure = True,
    workdir = "build/doc"
  ),
  steps.MultipleFileUpload(
    name = "publish documentation",
    workersrcs = [
      "doc/doxyhtml.zip"
    ],
    masterdest = util.Interpolate("/buildbot/data/stable/%(prop:OCTAVE_HG_ID)s/"),
    url = util.Interpolate("https://www.octave.space/data/stable/%(prop:OCTAVE_HG_ID)s/"),
    haltOnFailure = True,
    workdir = "build"
  )
])

OctaveMxeStableW32 = util.BuildFactory()

OctaveMxeStableW64 = util.BuildFactory()
OctaveMxeStableW64.addSteps([
  steps.ShellCommand(
    name = "Cleanup build directory",
    command = ["rm", "-Rf", "build"],
    haltOnFailure = True,
    workdir = "."
  ),
  steps.ShellCommand(
    name = "Ensure 'mxe-octave-pkg' directory",
    command = ["mkdir", "-p", "../mxe-octave-pkg"],
    haltOnFailure = True,
    workdir = "."
  ),
  steps.ShellCommand(
    name = "Download Octave release tarball",
    command = ["wget", util.Interpolate(
      "https://www.octave.space/data/stable/%(prop:OCTAVE_HG_ID)s/octave-%(prop:OCTAVE_VERSION)s.tar.lz")],
    haltOnFailure = True,
    workdir = "../mxe-octave-pkg"
  ),
  steps.Mercurial(
    name = "mxe-octave repository",
    repourl = "https://hg.octave.org/mxe-octave",
    mode = "full",
    method = "fresh",
    branchType = "inrepo",
    defaultBranch = "default",
    haltOnFailure = True,
    workdir = "src"
  ),
  steps.SetPropertyFromCommand(
    name = "mxe-octave HG_ID",
    command = "hg identify --id",
    property = "MXE_OCTAVE_HG_ID",
    haltOnFailure = True,
    workdir = "src"
  ),
  steps.ShellCommand(
    name = "bootstrap",
    command = ["./bootstrap"],
    haltOnFailure = True,
    workdir = "src"
  ),
  steps.ShellCommand(
    name = "configure",
    command = [
      "../src/configure",
      "--enable-devel-tools",
      "--enable-binary-packages",
      "--enable-octave=stable",
      "--with-pkg-dir=../../mxe-octave-pkg"
    ],
    haltOnFailure = True,
    workdir = "build"
  ),
  steps.ShellCommand(
    name = "make",
    command = ["make", "-j2", "JOBS=2", "all", "nsis-installer"],
    haltOnFailure = True,
    workdir = "build"
  ),
  steps.MultipleFileUpload(
    name = "publish build",
    workersrcs = [
      ""
    ],
    masterdest = util.Interpolate("/buildbot/data/stable/%(prop:OCTAVE_HG_ID)s/"),
    url = util.Interpolate("https://www.octave.space/data/stable/%(prop:OCTAVE_HG_ID)s/"),
    haltOnFailure = True,
    workdir = "build"
  ),
  steps.MasterShellCommand(
    name = "set file permission on master",
    command = "chmod -R +r .",
    haltOnFailure = True,
    workdir = "/buildbot/data"
  )
])

OctaveMxeStableW64_64 = util.BuildFactory()

c['builders'] = [
  util.BuilderConfig(
    name = "octave-stable",
    workernames = my_workers,
    factory = OctaveStable
  ),
  util.BuilderConfig(
    name = "octave-stable-doxygen",
    workernames = my_workers,
    factory = OctaveStableDoxygen
  ),
  util.BuilderConfig(
    name = "octave-mxe-stable-w32",
    workernames = my_workers,
    factory = OctaveMxeStableW32
  ),
  util.BuilderConfig(
    name = "octave-mxe-stable-w64",
    workernames = my_workers,
    factory = OctaveMxeStableW64
  ),
  util.BuilderConfig(
    name = "octave-mxe-stable-w64-64",
    workernames = my_workers,
    factory = OctaveMxeStableW64_64
  )
]

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Octave Buildbot Master [unconfigured]"
c['titleURL'] = "https://www.octave.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://localhost:8010/"

# Tuples of usernames and passwords for administrators authorized to login
# to the web interface and trigger builds, shutdown workers, etc.

my_admins = {"user01": "secret_password"}
my_admin_names = my_admins.keys()

# minimalistic config to activate new web UI
c['www'] = {
  "port": 8010,
  "auth": util.UserPasswordAuth(my_admins),
  "authz": util.Authz(
    allowRules = [
      util.AnyControlEndpointMatcher(role = "admins")
    ],
    roleMatchers = [
      util.RolesFromUsername(roles = ["admins"],
                             usernames = my_admin_names)
    ]
  ),
  "plugins": {
    "waterfall_view": {},
    "console_view": {},
    "grid_view": {}
    }
}

####### DB URL

c['db'] = {
  # This specifies what database buildbot uses to store its state.
  # It's easy to start with sqlite, but it's recommended to switch to a
  # dedicated database, such as PostgreSQL or MySQL, for use in production
  # environments.
  # http://docs.buildbot.net/current/manual/configuration/global.html#database-specification
  'db_url' : "sqlite:///state.sqlite",
}
